// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Zcash.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import VSwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of VSwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: VSwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: VSwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct TW_Zcash_Proto_TransactionBuilderExtraData {
  // VSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the VSwiftProtobuf library for
  // methods supported on all messages.

  /// Currently, `branch_id` is the only configurable Zcash specific parameter.
  /// There can also be `version_group_id` configured in the future.
  public var branchID: Data = Data()

  /// Zero in most cases.
  public var expiryHeight: UInt32 = 0

  /// Whether to calculate the fee according to ZIP-0317 for the given transaction
  /// https://zips.z.cash/zip-0317#fee-calculation
  public var zip0317: Bool = false

  public var unknownFields = VSwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Zcash_Proto_Transaction {
  // VSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the VSwiftProtobuf library for
  // methods supported on all messages.

  //// Transaction version.
  //// Currently, version 4 (0x80000004) is supported only.
  public var version: Int32 = 0

  /// If transaction version is 4 (0x80000004), version group ID is 0x892F2085.
  public var versionGroupID: UInt32 = 0

  /// The transaction inputs.
  public var inputs: [TW_Utxo_Proto_TransactionInput] = []

  /// The transaction outputs.
  public var outputs: [TW_Utxo_Proto_TransactionOutput] = []

  /// Block height or timestamp indicating at what point transactions can be included in a block.
  /// Zero by default.
  public var lockTime: UInt32 = 0

  /// Expiry height.
  public var expiryHeight: UInt32 = 0

  /// Sapling value balance for the transaction.
  /// Always 0 for a transparent transaction.
  public var saplingValueBalance: Int64 = 0

  /// Consensus branch ID for the epoch of the block containing the transaction.
  public var branchID: Data = Data()

  public var unknownFields = VSwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the VSwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Zcash.Proto"

extension TW_Zcash_Proto_TransactionBuilderExtraData: VSwiftProtobuf.Message, VSwiftProtobuf._MessageImplementationBase, VSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionBuilderExtraData"
  public static let _protobuf_nameMap: VSwiftProtobuf._NameMap = [
    1: .standard(proto: "branch_id"),
    2: .standard(proto: "expiry_height"),
    3: .standard(proto: "zip_0317"),
  ]

  public mutating func decodeMessage<D: VSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.branchID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.expiryHeight) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.zip0317) }()
      default: break
      }
    }
  }

  public func traverse<V: VSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.branchID.isEmpty {
      try visitor.visitSingularBytesField(value: self.branchID, fieldNumber: 1)
    }
    if self.expiryHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.expiryHeight, fieldNumber: 2)
    }
    if self.zip0317 != false {
      try visitor.visitSingularBoolField(value: self.zip0317, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Zcash_Proto_TransactionBuilderExtraData, rhs: TW_Zcash_Proto_TransactionBuilderExtraData) -> Bool {
    if lhs.branchID != rhs.branchID {return false}
    if lhs.expiryHeight != rhs.expiryHeight {return false}
    if lhs.zip0317 != rhs.zip0317 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Zcash_Proto_Transaction: VSwiftProtobuf.Message, VSwiftProtobuf._MessageImplementationBase, VSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: VSwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "version_group_id"),
    3: .same(proto: "inputs"),
    4: .same(proto: "outputs"),
    5: .standard(proto: "lock_time"),
    6: .standard(proto: "expiry_height"),
    7: .standard(proto: "sapling_value_balance"),
    8: .standard(proto: "branch_id"),
  ]

  public mutating func decodeMessage<D: VSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.versionGroupID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.lockTime) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.expiryHeight) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.saplingValueBalance) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.branchID) }()
      default: break
      }
    }
  }

  public func traverse<V: VSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 1)
    }
    if self.versionGroupID != 0 {
      try visitor.visitSingularUInt32Field(value: self.versionGroupID, fieldNumber: 2)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 3)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 4)
    }
    if self.lockTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.lockTime, fieldNumber: 5)
    }
    if self.expiryHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.expiryHeight, fieldNumber: 6)
    }
    if self.saplingValueBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.saplingValueBalance, fieldNumber: 7)
    }
    if !self.branchID.isEmpty {
      try visitor.visitSingularBytesField(value: self.branchID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Zcash_Proto_Transaction, rhs: TW_Zcash_Proto_Transaction) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.versionGroupID != rhs.versionGroupID {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.lockTime != rhs.lockTime {return false}
    if lhs.expiryHeight != rhs.expiryHeight {return false}
    if lhs.saplingValueBalance != rhs.saplingValueBalance {return false}
    if lhs.branchID != rhs.branchID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
