// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Biz.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

import Foundation
import WalletCoreSwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of WalletCoreSwiftProtobuf.to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: WalletCoreSwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: WalletCoreSwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct TW_Biz_Proto_ExecuteWithPasskeySessionInput {
  // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
  // methods supported on all messages.

  /// Batched executions to be executed on the smart contract wallet.
  public var executions: [TW_Biz_Proto_ExecuteWithPasskeySessionInput.Execution] = []

  /// Transaction valid after this timestamp.
  public var validAfter: UInt64 = 0

  /// Transaction valid until this timestamp.
  public var validUntil: UInt64 = 0

  /// Passkey session signature.
  public var passkeySignature: Data = Data()

  public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

  public struct Execution {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    /// Recipient addresses.
    public var address: String = String()

    /// Amounts to send in wei (uint256, serialized big endian)
    public var amount: Data = Data()

    /// Contract call payloads data
    public var payload: Data = Data()

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the WalletCoreSwiftProtobuf.runtime.

fileprivate let _protobuf_package = "TW.Biz.Proto"

extension TW_Biz_Proto_ExecuteWithPasskeySessionInput: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecuteWithPasskeySessionInput"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "executions"),
    2: .standard(proto: "valid_after"),
    3: .standard(proto: "valid_until"),
    4: .standard(proto: "passkey_signature"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.executions) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.validAfter) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.validUntil) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.passkeySignature) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.executions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.executions, fieldNumber: 1)
    }
    if self.validAfter != 0 {
      try visitor.visitSingularUInt64Field(value: self.validAfter, fieldNumber: 2)
    }
    if self.validUntil != 0 {
      try visitor.visitSingularUInt64Field(value: self.validUntil, fieldNumber: 3)
    }
    if !self.passkeySignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.passkeySignature, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Biz_Proto_ExecuteWithPasskeySessionInput, rhs: TW_Biz_Proto_ExecuteWithPasskeySessionInput) -> Bool {
    if lhs.executions != rhs.executions {return false}
    if lhs.validAfter != rhs.validAfter {return false}
    if lhs.validUntil != rhs.validUntil {return false}
    if lhs.passkeySignature != rhs.passkeySignature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Biz_Proto_ExecuteWithPasskeySessionInput.Execution: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Biz_Proto_ExecuteWithPasskeySessionInput.protoMessageName + ".Execution"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "amount"),
    3: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.amount) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Biz_Proto_ExecuteWithPasskeySessionInput.Execution, rhs: TW_Biz_Proto_ExecuteWithPasskeySessionInput.Execution) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
