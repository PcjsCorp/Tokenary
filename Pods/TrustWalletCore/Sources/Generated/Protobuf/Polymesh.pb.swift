// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Polymesh.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// SPDX-License-Identifier: Apache-2.0
//
// Copyright Â© 2017 Trust Wallet.

import Foundation
import WalletCoreSwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of WalletCoreSwiftProtobuf.to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: WalletCoreSwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: WalletCoreSwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Balance transfer transaction
public struct TW_Polymesh_Proto_Balance {
  // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
  // methods supported on all messages.

  public var messageOneof: TW_Polymesh_Proto_Balance.OneOf_MessageOneof? = nil

  public var transfer: TW_Polymesh_Proto_Balance.Transfer {
    get {
      if case .transfer(let v)? = messageOneof {return v}
      return TW_Polymesh_Proto_Balance.Transfer()
    }
    set {messageOneof = .transfer(newValue)}
  }

  public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case transfer(TW_Polymesh_Proto_Balance.Transfer)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Polymesh_Proto_Balance.OneOf_MessageOneof, rhs: TW_Polymesh_Proto_Balance.OneOf_MessageOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.transfer, .transfer): return {
        guard case .transfer(let l) = lhs, case .transfer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  /// transfer
  public struct Transfer {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    /// destination address
    public var toAddress: String = String()

    /// amount (uint256, serialized big endian)
    public var value: Data = Data()

    /// max 32 chars
    public var memo: String = String()

    /// call indices
    public var callIndices: TW_Polkadot_Proto_CallIndices {
      get {return _callIndices ?? TW_Polkadot_Proto_CallIndices()}
      set {_callIndices = newValue}
    }
    /// Returns true if `callIndices` has been explicitly set.
    public var hasCallIndices: Bool {return self._callIndices != nil}
    /// Clears the value of `callIndices`. Subsequent reads from it will return its default value.
    public mutating func clearCallIndices() {self._callIndices = nil}

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _callIndices: TW_Polkadot_Proto_CallIndices? = nil
  }

  public init() {}
}

/// Staking transaction
public struct TW_Polymesh_Proto_Staking {
  // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
  // methods supported on all messages.

  /// Payload messsage
  public var messageOneof: TW_Polymesh_Proto_Staking.OneOf_MessageOneof? = nil

  public var bond: TW_Polymesh_Proto_Staking.Bond {
    get {
      if case .bond(let v)? = messageOneof {return v}
      return TW_Polymesh_Proto_Staking.Bond()
    }
    set {messageOneof = .bond(newValue)}
  }

  public var bondExtra: TW_Polymesh_Proto_Staking.BondExtra {
    get {
      if case .bondExtra(let v)? = messageOneof {return v}
      return TW_Polymesh_Proto_Staking.BondExtra()
    }
    set {messageOneof = .bondExtra(newValue)}
  }

  public var unbond: TW_Polymesh_Proto_Staking.Unbond {
    get {
      if case .unbond(let v)? = messageOneof {return v}
      return TW_Polymesh_Proto_Staking.Unbond()
    }
    set {messageOneof = .unbond(newValue)}
  }

  public var withdrawUnbonded: TW_Polymesh_Proto_Staking.WithdrawUnbonded {
    get {
      if case .withdrawUnbonded(let v)? = messageOneof {return v}
      return TW_Polymesh_Proto_Staking.WithdrawUnbonded()
    }
    set {messageOneof = .withdrawUnbonded(newValue)}
  }

  public var nominate: TW_Polymesh_Proto_Staking.Nominate {
    get {
      if case .nominate(let v)? = messageOneof {return v}
      return TW_Polymesh_Proto_Staking.Nominate()
    }
    set {messageOneof = .nominate(newValue)}
  }

  public var chill: TW_Polymesh_Proto_Staking.Chill {
    get {
      if case .chill(let v)? = messageOneof {return v}
      return TW_Polymesh_Proto_Staking.Chill()
    }
    set {messageOneof = .chill(newValue)}
  }

  public var rebond: TW_Polymesh_Proto_Staking.Rebond {
    get {
      if case .rebond(let v)? = messageOneof {return v}
      return TW_Polymesh_Proto_Staking.Rebond()
    }
    set {messageOneof = .rebond(newValue)}
  }

  public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

  /// Payload messsage
  public enum OneOf_MessageOneof: Equatable {
    case bond(TW_Polymesh_Proto_Staking.Bond)
    case bondExtra(TW_Polymesh_Proto_Staking.BondExtra)
    case unbond(TW_Polymesh_Proto_Staking.Unbond)
    case withdrawUnbonded(TW_Polymesh_Proto_Staking.WithdrawUnbonded)
    case nominate(TW_Polymesh_Proto_Staking.Nominate)
    case chill(TW_Polymesh_Proto_Staking.Chill)
    case rebond(TW_Polymesh_Proto_Staking.Rebond)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Polymesh_Proto_Staking.OneOf_MessageOneof, rhs: TW_Polymesh_Proto_Staking.OneOf_MessageOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.bond, .bond): return {
        guard case .bond(let l) = lhs, case .bond(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bondExtra, .bondExtra): return {
        guard case .bondExtra(let l) = lhs, case .bondExtra(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.unbond, .unbond): return {
        guard case .unbond(let l) = lhs, case .unbond(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.withdrawUnbonded, .withdrawUnbonded): return {
        guard case .withdrawUnbonded(let l) = lhs, case .withdrawUnbonded(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.nominate, .nominate): return {
        guard case .nominate(let l) = lhs, case .nominate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.chill, .chill): return {
        guard case .chill(let l) = lhs, case .chill(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.rebond, .rebond): return {
        guard case .rebond(let l) = lhs, case .rebond(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Bond to a controller
  public struct Bond {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    /// controller ID (optional)
    public var controller: String = String()

    /// amount (uint256, serialized big endian)
    public var value: Data = Data()

    /// destination for rewards
    public var rewardDestination: TW_Polkadot_Proto_RewardDestination = .staked

    /// call indices
    public var callIndices: TW_Polkadot_Proto_CallIndices {
      get {return _callIndices ?? TW_Polkadot_Proto_CallIndices()}
      set {_callIndices = newValue}
    }
    /// Returns true if `callIndices` has been explicitly set.
    public var hasCallIndices: Bool {return self._callIndices != nil}
    /// Clears the value of `callIndices`. Subsequent reads from it will return its default value.
    public mutating func clearCallIndices() {self._callIndices = nil}

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _callIndices: TW_Polkadot_Proto_CallIndices? = nil
  }

  /// Bond extra amount
  public struct BondExtra {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    /// amount (uint256, serialized big endian)
    public var value: Data = Data()

    /// call indices
    public var callIndices: TW_Polkadot_Proto_CallIndices {
      get {return _callIndices ?? TW_Polkadot_Proto_CallIndices()}
      set {_callIndices = newValue}
    }
    /// Returns true if `callIndices` has been explicitly set.
    public var hasCallIndices: Bool {return self._callIndices != nil}
    /// Clears the value of `callIndices`. Subsequent reads from it will return its default value.
    public mutating func clearCallIndices() {self._callIndices = nil}

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _callIndices: TW_Polkadot_Proto_CallIndices? = nil
  }

  /// Unbond
  public struct Unbond {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    /// amount (uint256, serialized big endian)
    public var value: Data = Data()

    /// call indices
    public var callIndices: TW_Polkadot_Proto_CallIndices {
      get {return _callIndices ?? TW_Polkadot_Proto_CallIndices()}
      set {_callIndices = newValue}
    }
    /// Returns true if `callIndices` has been explicitly set.
    public var hasCallIndices: Bool {return self._callIndices != nil}
    /// Clears the value of `callIndices`. Subsequent reads from it will return its default value.
    public mutating func clearCallIndices() {self._callIndices = nil}

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _callIndices: TW_Polkadot_Proto_CallIndices? = nil
  }

  /// Rebond
  public struct Rebond {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    /// amount (uint256, serialized big endian)
    public var value: Data = Data()

    /// call indices
    public var callIndices: TW_Polkadot_Proto_CallIndices {
      get {return _callIndices ?? TW_Polkadot_Proto_CallIndices()}
      set {_callIndices = newValue}
    }
    /// Returns true if `callIndices` has been explicitly set.
    public var hasCallIndices: Bool {return self._callIndices != nil}
    /// Clears the value of `callIndices`. Subsequent reads from it will return its default value.
    public mutating func clearCallIndices() {self._callIndices = nil}

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _callIndices: TW_Polkadot_Proto_CallIndices? = nil
  }

  /// Withdraw unbonded amounts
  public struct WithdrawUnbonded {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    public var slashingSpans: Int32 = 0

    /// call indices
    public var callIndices: TW_Polkadot_Proto_CallIndices {
      get {return _callIndices ?? TW_Polkadot_Proto_CallIndices()}
      set {_callIndices = newValue}
    }
    /// Returns true if `callIndices` has been explicitly set.
    public var hasCallIndices: Bool {return self._callIndices != nil}
    /// Clears the value of `callIndices`. Subsequent reads from it will return its default value.
    public mutating func clearCallIndices() {self._callIndices = nil}

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _callIndices: TW_Polkadot_Proto_CallIndices? = nil
  }

  /// Nominate
  public struct Nominate {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    /// list of nominators
    public var nominators: [String] = []

    /// call indices
    public var callIndices: TW_Polkadot_Proto_CallIndices {
      get {return _callIndices ?? TW_Polkadot_Proto_CallIndices()}
      set {_callIndices = newValue}
    }
    /// Returns true if `callIndices` has been explicitly set.
    public var hasCallIndices: Bool {return self._callIndices != nil}
    /// Clears the value of `callIndices`. Subsequent reads from it will return its default value.
    public mutating func clearCallIndices() {self._callIndices = nil}

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _callIndices: TW_Polkadot_Proto_CallIndices? = nil
  }

  /// Chill
  public struct Chill {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    /// call indices
    public var callIndices: TW_Polkadot_Proto_CallIndices {
      get {return _callIndices ?? TW_Polkadot_Proto_CallIndices()}
      set {_callIndices = newValue}
    }
    /// Returns true if `callIndices` has been explicitly set.
    public var hasCallIndices: Bool {return self._callIndices != nil}
    /// Clears the value of `callIndices`. Subsequent reads from it will return its default value.
    public mutating func clearCallIndices() {self._callIndices = nil}

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _callIndices: TW_Polkadot_Proto_CallIndices? = nil
  }

  public init() {}
}

public struct TW_Polymesh_Proto_IdentityId {
  // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
  // methods supported on all messages.

  /// 32 byte identity id.
  public var id: Data = Data()

  public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Polymesh_Proto_AssetId {
  // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
  // methods supported on all messages.

  /// 16 byte asset id.
  public var id: Data = Data()

  public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Polymesh_Proto_PortfolioId {
  // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
  // methods supported on all messages.

  /// IdentityId of the portfolio owner.
  public var identity: TW_Polymesh_Proto_IdentityId {
    get {return _identity ?? TW_Polymesh_Proto_IdentityId()}
    set {_identity = newValue}
  }
  /// Returns true if `identity` has been explicitly set.
  public var hasIdentity: Bool {return self._identity != nil}
  /// Clears the value of `identity`. Subsequent reads from it will return its default value.
  public mutating func clearIdentity() {self._identity = nil}

  /// If `default` is true ignore the `user` field.
  public var `default`: Bool = false

  /// The users portfolio number.  (ignored if `default = true`)
  public var user: UInt64 = 0

  public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _identity: TW_Polymesh_Proto_IdentityId? = nil
}

public struct TW_Polymesh_Proto_SecondaryKeyPermissions {
  // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
  // methods supported on all messages.

  /// The assets permissions of the secondary key.
  public var asset: TW_Polymesh_Proto_SecondaryKeyPermissions.AssetPermissions {
    get {return _asset ?? TW_Polymesh_Proto_SecondaryKeyPermissions.AssetPermissions()}
    set {_asset = newValue}
  }
  /// Returns true if `asset` has been explicitly set.
  public var hasAsset: Bool {return self._asset != nil}
  /// Clears the value of `asset`. Subsequent reads from it will return its default value.
  public mutating func clearAsset() {self._asset = nil}

  /// The pallet/extrinsic permissions of the secondary key.
  public var extrinsic: TW_Polymesh_Proto_SecondaryKeyPermissions.ExtrinsicPermissions {
    get {return _extrinsic ?? TW_Polymesh_Proto_SecondaryKeyPermissions.ExtrinsicPermissions()}
    set {_extrinsic = newValue}
  }
  /// Returns true if `extrinsic` has been explicitly set.
  public var hasExtrinsic: Bool {return self._extrinsic != nil}
  /// Clears the value of `extrinsic`. Subsequent reads from it will return its default value.
  public mutating func clearExtrinsic() {self._extrinsic = nil}

  /// The portfolio permissions of the secondary key.
  public var portfolio: TW_Polymesh_Proto_SecondaryKeyPermissions.PortfolioPermissions {
    get {return _portfolio ?? TW_Polymesh_Proto_SecondaryKeyPermissions.PortfolioPermissions()}
    set {_portfolio = newValue}
  }
  /// Returns true if `portfolio` has been explicitly set.
  public var hasPortfolio: Bool {return self._portfolio != nil}
  /// Clears the value of `portfolio`. Subsequent reads from it will return its default value.
  public mutating func clearPortfolio() {self._portfolio = nil}

  public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

  public enum RestrictionKind: WalletCoreSwiftProtobuf.Enum {
    public typealias RawValue = Int
    case whole // = 0
    case these // = 1
    case except // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .whole
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .whole
      case 1: self = .these
      case 2: self = .except
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .whole: return 0
      case .these: return 1
      case .except: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct AssetPermissions {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    public var kind: TW_Polymesh_Proto_SecondaryKeyPermissions.RestrictionKind = .whole

    public var assets: [TW_Polymesh_Proto_AssetId] = []

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct PortfolioPermissions {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    public var kind: TW_Polymesh_Proto_SecondaryKeyPermissions.RestrictionKind = .whole

    public var portfolios: [TW_Polymesh_Proto_PortfolioId] = []

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct PalletPermissions {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    public var palletName: String = String()

    public var kind: TW_Polymesh_Proto_SecondaryKeyPermissions.RestrictionKind = .whole

    public var extrinsicNames: [String] = []

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ExtrinsicPermissions {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    public var kind: TW_Polymesh_Proto_SecondaryKeyPermissions.RestrictionKind = .whole

    public var pallets: [TW_Polymesh_Proto_SecondaryKeyPermissions.PalletPermissions] = []

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _asset: TW_Polymesh_Proto_SecondaryKeyPermissions.AssetPermissions? = nil
  fileprivate var _extrinsic: TW_Polymesh_Proto_SecondaryKeyPermissions.ExtrinsicPermissions? = nil
  fileprivate var _portfolio: TW_Polymesh_Proto_SecondaryKeyPermissions.PortfolioPermissions? = nil
}

#if swift(>=4.2)

extension TW_Polymesh_Proto_SecondaryKeyPermissions.RestrictionKind: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Polymesh_Proto_SecondaryKeyPermissions.RestrictionKind] = [
    .whole,
    .these,
    .except,
  ]
}

#endif  // swift(>=4.2)

/// Identity module
public struct TW_Polymesh_Proto_Identity {
  // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
  // methods supported on all messages.

  public var messageOneof: TW_Polymesh_Proto_Identity.OneOf_MessageOneof? = nil

  public var joinIdentityAsKey: TW_Polymesh_Proto_Identity.JoinIdentityAsKey {
    get {
      if case .joinIdentityAsKey(let v)? = messageOneof {return v}
      return TW_Polymesh_Proto_Identity.JoinIdentityAsKey()
    }
    set {messageOneof = .joinIdentityAsKey(newValue)}
  }

  public var addAuthorization: TW_Polymesh_Proto_Identity.AddAuthorization {
    get {
      if case .addAuthorization(let v)? = messageOneof {return v}
      return TW_Polymesh_Proto_Identity.AddAuthorization()
    }
    set {messageOneof = .addAuthorization(newValue)}
  }

  public var leaveIdentityAsKey: TW_Polymesh_Proto_Identity.LeaveIdentityAsKey {
    get {
      if case .leaveIdentityAsKey(let v)? = messageOneof {return v}
      return TW_Polymesh_Proto_Identity.LeaveIdentityAsKey()
    }
    set {messageOneof = .leaveIdentityAsKey(newValue)}
  }

  public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case joinIdentityAsKey(TW_Polymesh_Proto_Identity.JoinIdentityAsKey)
    case addAuthorization(TW_Polymesh_Proto_Identity.AddAuthorization)
    case leaveIdentityAsKey(TW_Polymesh_Proto_Identity.LeaveIdentityAsKey)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Polymesh_Proto_Identity.OneOf_MessageOneof, rhs: TW_Polymesh_Proto_Identity.OneOf_MessageOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.joinIdentityAsKey, .joinIdentityAsKey): return {
        guard case .joinIdentityAsKey(let l) = lhs, case .joinIdentityAsKey(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.addAuthorization, .addAuthorization): return {
        guard case .addAuthorization(let l) = lhs, case .addAuthorization(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.leaveIdentityAsKey, .leaveIdentityAsKey): return {
        guard case .leaveIdentityAsKey(let l) = lhs, case .leaveIdentityAsKey(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Identity::join_identity_as_key call
  public struct JoinIdentityAsKey {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    /// call indices
    public var callIndices: TW_Polkadot_Proto_CallIndices {
      get {return _callIndices ?? TW_Polkadot_Proto_CallIndices()}
      set {_callIndices = newValue}
    }
    /// Returns true if `callIndices` has been explicitly set.
    public var hasCallIndices: Bool {return self._callIndices != nil}
    /// Clears the value of `callIndices`. Subsequent reads from it will return its default value.
    public mutating func clearCallIndices() {self._callIndices = nil}

    /// auth id
    public var authID: UInt64 = 0

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _callIndices: TW_Polkadot_Proto_CallIndices? = nil
  }

  /// Identity::leave_identity_as_key call
  public struct LeaveIdentityAsKey {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    /// call indices
    public var callIndices: TW_Polkadot_Proto_CallIndices {
      get {return _callIndices ?? TW_Polkadot_Proto_CallIndices()}
      set {_callIndices = newValue}
    }
    /// Returns true if `callIndices` has been explicitly set.
    public var hasCallIndices: Bool {return self._callIndices != nil}
    /// Clears the value of `callIndices`. Subsequent reads from it will return its default value.
    public mutating func clearCallIndices() {self._callIndices = nil}

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _callIndices: TW_Polkadot_Proto_CallIndices? = nil
  }

  /// Identity::add_authorization call
  public struct AddAuthorization {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    /// call indices
    public var callIndices: TW_Polkadot_Proto_CallIndices {
      get {return _callIndices ?? TW_Polkadot_Proto_CallIndices()}
      set {_callIndices = newValue}
    }
    /// Returns true if `callIndices` has been explicitly set.
    public var hasCallIndices: Bool {return self._callIndices != nil}
    /// Clears the value of `callIndices`. Subsequent reads from it will return its default value.
    public mutating func clearCallIndices() {self._callIndices = nil}

    /// address that will be added to the Identity
    public var target: String = String()

    /// Authorization.
    public var authorization: TW_Polymesh_Proto_Identity.AddAuthorization.Authorization {
      get {return _authorization ?? TW_Polymesh_Proto_Identity.AddAuthorization.Authorization()}
      set {_authorization = newValue}
    }
    /// Returns true if `authorization` has been explicitly set.
    public var hasAuthorization: Bool {return self._authorization != nil}
    /// Clears the value of `authorization`. Subsequent reads from it will return its default value.
    public mutating func clearAuthorization() {self._authorization = nil}

    /// expire time, unix seconds
    public var expiry: UInt64 = 0

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public struct Authorization {
      // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
      // methods supported on all messages.

      /// Authorization data.
      public var authOneof: TW_Polymesh_Proto_Identity.AddAuthorization.Authorization.OneOf_AuthOneof? = nil

      /// AttestPrimaryKeyRotation(IdentityId) = 1
      /// RotatePrimaryKey = 2
      /// TransferTicker(Ticker) = 3
      /// AddMultiSigSigner(AccountId) = 4
      /// TransferAssetOwnership(AssetId) = 5
      public var joinIdentity: TW_Polymesh_Proto_SecondaryKeyPermissions {
        get {
          if case .joinIdentity(let v)? = authOneof {return v}
          return TW_Polymesh_Proto_SecondaryKeyPermissions()
        }
        set {authOneof = .joinIdentity(newValue)}
      }

      public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

      /// Authorization data.
      public enum OneOf_AuthOneof: Equatable {
        /// AttestPrimaryKeyRotation(IdentityId) = 1
        /// RotatePrimaryKey = 2
        /// TransferTicker(Ticker) = 3
        /// AddMultiSigSigner(AccountId) = 4
        /// TransferAssetOwnership(AssetId) = 5
        case joinIdentity(TW_Polymesh_Proto_SecondaryKeyPermissions)

      #if !swift(>=4.1)
        public static func ==(lhs: TW_Polymesh_Proto_Identity.AddAuthorization.Authorization.OneOf_AuthOneof, rhs: TW_Polymesh_Proto_Identity.AddAuthorization.Authorization.OneOf_AuthOneof) -> Bool {
          // The use of inline closures is to circumvent an issue where the compiler
          // allocates stack space for every case branch when no optimizations are
          // enabled. https://github.com/apple/swift-protobuf/issues/1034
          switch (lhs, rhs) {
          case (.joinIdentity, .joinIdentity): return {
            guard case .joinIdentity(let l) = lhs, case .joinIdentity(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          }
        }
      #endif
      }

      public init() {}
    }

    public init() {}

    fileprivate var _callIndices: TW_Polkadot_Proto_CallIndices? = nil
    fileprivate var _authorization: TW_Polymesh_Proto_Identity.AddAuthorization.Authorization? = nil
  }

  public init() {}
}

/// Utility pallet transaction
public struct TW_Polymesh_Proto_Utility {
  // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
  // methods supported on all messages.

  public var messageOneof: TW_Polymesh_Proto_Utility.OneOf_MessageOneof? = nil

  public var batch: TW_Polymesh_Proto_Utility.Batch {
    get {
      if case .batch(let v)? = messageOneof {return v}
      return TW_Polymesh_Proto_Utility.Batch()
    }
    set {messageOneof = .batch(newValue)}
  }

  public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case batch(TW_Polymesh_Proto_Utility.Batch)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Polymesh_Proto_Utility.OneOf_MessageOneof, rhs: TW_Polymesh_Proto_Utility.OneOf_MessageOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.batch, .batch): return {
        guard case .batch(let l) = lhs, case .batch(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public enum BatchKind: WalletCoreSwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Batch multiple calls, stoping on the first error.
    ///
    /// Each call in the batch is executed in its own transaction.
    /// When one call fails only that transaction will be rolled back
    /// and any following calls in the batch will be skipped.
    case stopOnError // = 0

    /// Batch multiple calls and execute them in a single atomic transaction.
    /// The whole transaction will rollback if any of the calls fail.
    case atomic // = 1

    /// Batch multiple calls.  Unlike `Batch` this will continue even
    /// if one of the calls failed.
    ///
    /// Each call in the batch is executed in its own transaction.
    /// When a call fails its transaction will be rolled back and the error
    /// will be emitted in an event.
    /// 
    /// Execution will continue until all calls in the batch have been executed.
    case optimistic // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .stopOnError
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .stopOnError
      case 1: self = .atomic
      case 2: self = .optimistic
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .stopOnError: return 0
      case .atomic: return 1
      case .optimistic: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct Batch {
    // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
    // methods supported on all messages.

    /// The type of batch.
    public var kind: TW_Polymesh_Proto_Utility.BatchKind = .stopOnError

    /// batched calls.
    public var calls: [TW_Polymesh_Proto_RuntimeCall] = []

    /// call indices
    public var callIndices: TW_Polkadot_Proto_CallIndices {
      get {return _callIndices ?? TW_Polkadot_Proto_CallIndices()}
      set {_callIndices = newValue}
    }
    /// Returns true if `callIndices` has been explicitly set.
    public var hasCallIndices: Bool {return self._callIndices != nil}
    /// Clears the value of `callIndices`. Subsequent reads from it will return its default value.
    public mutating func clearCallIndices() {self._callIndices = nil}

    public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _callIndices: TW_Polkadot_Proto_CallIndices? = nil
  }

  public init() {}
}

#if swift(>=4.2)

extension TW_Polymesh_Proto_Utility.BatchKind: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Polymesh_Proto_Utility.BatchKind] = [
    .stopOnError,
    .atomic,
    .optimistic,
  ]
}

#endif  // swift(>=4.2)

/// Polymesh runtime call.
public struct TW_Polymesh_Proto_RuntimeCall {
  // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
  // methods supported on all messages.

  /// Top-level pallets.
  public var palletOneof: TW_Polymesh_Proto_RuntimeCall.OneOf_PalletOneof? = nil

  public var balanceCall: TW_Polymesh_Proto_Balance {
    get {
      if case .balanceCall(let v)? = palletOneof {return v}
      return TW_Polymesh_Proto_Balance()
    }
    set {palletOneof = .balanceCall(newValue)}
  }

  public var stakingCall: TW_Polymesh_Proto_Staking {
    get {
      if case .stakingCall(let v)? = palletOneof {return v}
      return TW_Polymesh_Proto_Staking()
    }
    set {palletOneof = .stakingCall(newValue)}
  }

  public var identityCall: TW_Polymesh_Proto_Identity {
    get {
      if case .identityCall(let v)? = palletOneof {return v}
      return TW_Polymesh_Proto_Identity()
    }
    set {palletOneof = .identityCall(newValue)}
  }

  public var utilityCall: TW_Polymesh_Proto_Utility {
    get {
      if case .utilityCall(let v)? = palletOneof {return v}
      return TW_Polymesh_Proto_Utility()
    }
    set {palletOneof = .utilityCall(newValue)}
  }

  public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

  /// Top-level pallets.
  public enum OneOf_PalletOneof: Equatable {
    case balanceCall(TW_Polymesh_Proto_Balance)
    case stakingCall(TW_Polymesh_Proto_Staking)
    case identityCall(TW_Polymesh_Proto_Identity)
    case utilityCall(TW_Polymesh_Proto_Utility)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Polymesh_Proto_RuntimeCall.OneOf_PalletOneof, rhs: TW_Polymesh_Proto_RuntimeCall.OneOf_PalletOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.balanceCall, .balanceCall): return {
        guard case .balanceCall(let l) = lhs, case .balanceCall(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.stakingCall, .stakingCall): return {
        guard case .stakingCall(let l) = lhs, case .stakingCall(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.identityCall, .identityCall): return {
        guard case .identityCall(let l) = lhs, case .identityCall(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.utilityCall, .utilityCall): return {
        guard case .utilityCall(let l) = lhs, case .utilityCall(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Input data necessary to create a signed transaction.
public struct TW_Polymesh_Proto_SigningInput {
  // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
  // methods supported on all messages.

  /// Recent block hash, or genesis hash if era is not set
  public var blockHash: Data {
    get {return _storage._blockHash}
    set {_uniqueStorage()._blockHash = newValue}
  }

  /// Genesis block hash (identifies the chain)
  public var genesisHash: Data {
    get {return _storage._genesisHash}
    set {_uniqueStorage()._genesisHash = newValue}
  }

  /// Current account nonce
  public var nonce: UInt64 {
    get {return _storage._nonce}
    set {_uniqueStorage()._nonce = newValue}
  }

  /// Specification version, e.g. 26.
  public var specVersion: UInt32 {
    get {return _storage._specVersion}
    set {_uniqueStorage()._specVersion = newValue}
  }

  /// Transaction version, e.g. 5.
  public var transactionVersion: UInt32 {
    get {return _storage._transactionVersion}
    set {_uniqueStorage()._transactionVersion = newValue}
  }

  /// Optional tip to pay, big integer
  public var tip: Data {
    get {return _storage._tip}
    set {_uniqueStorage()._tip = newValue}
  }

  /// Optional time validity limit, recommended, for replay-protection.  Empty means Immortal.
  public var era: TW_Polkadot_Proto_Era {
    get {return _storage._era ?? TW_Polkadot_Proto_Era()}
    set {_uniqueStorage()._era = newValue}
  }
  /// Returns true if `era` has been explicitly set.
  public var hasEra: Bool {return _storage._era != nil}
  /// Clears the value of `era`. Subsequent reads from it will return its default value.
  public mutating func clearEra() {_uniqueStorage()._era = nil}

  /// The secret private key used for signing (32 bytes).
  public var privateKey: Data {
    get {return _storage._privateKey}
    set {_uniqueStorage()._privateKey = newValue}
  }

  /// Network type
  public var network: UInt32 {
    get {return _storage._network}
    set {_uniqueStorage()._network = newValue}
  }

  /// Payload call
  public var runtimeCall: TW_Polymesh_Proto_RuntimeCall {
    get {return _storage._runtimeCall ?? TW_Polymesh_Proto_RuntimeCall()}
    set {_uniqueStorage()._runtimeCall = newValue}
  }
  /// Returns true if `runtimeCall` has been explicitly set.
  public var hasRuntimeCall: Bool {return _storage._runtimeCall != nil}
  /// Clears the value of `runtimeCall`. Subsequent reads from it will return its default value.
  public mutating func clearRuntimeCall() {_uniqueStorage()._runtimeCall = nil}

  public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Result containing the signed and encoded transaction.
public struct TW_Polymesh_Proto_SigningOutput {
  // WalletCoreSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the WalletCoreSwiftProtobuf.library for
  // methods supported on all messages.

  /// Signed and encoded transaction bytes.
  public var encoded: Data = Data()

  /// error code, 0 is ok, other codes will be treated as errors
  public var error: TW_Common_Proto_SigningError = .ok

  /// error code description
  public var errorMessage: String = String()

  public var unknownFields = WalletCoreSwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the WalletCoreSwiftProtobuf.runtime.

fileprivate let _protobuf_package = "TW.Polymesh.Proto"

extension TW_Polymesh_Proto_Balance: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Balance"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "transfer"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: TW_Polymesh_Proto_Balance.Transfer?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .transfer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .transfer(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .transfer(let v)? = self.messageOneof {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Balance, rhs: TW_Polymesh_Proto_Balance) -> Bool {
    if lhs.messageOneof != rhs.messageOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Balance.Transfer: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Balance.protoMessageName + ".Transfer"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .standard(proto: "to_address"),
    2: .same(proto: "value"),
    3: .same(proto: "memo"),
    4: .standard(proto: "call_indices"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.memo) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._callIndices) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    if !self.memo.isEmpty {
      try visitor.visitSingularStringField(value: self.memo, fieldNumber: 3)
    }
    try { if let v = self._callIndices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Balance.Transfer, rhs: TW_Polymesh_Proto_Balance.Transfer) -> Bool {
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.value != rhs.value {return false}
    if lhs.memo != rhs.memo {return false}
    if lhs._callIndices != rhs._callIndices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Staking: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Staking"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "bond"),
    2: .standard(proto: "bond_extra"),
    3: .same(proto: "unbond"),
    4: .standard(proto: "withdraw_unbonded"),
    5: .same(proto: "nominate"),
    6: .same(proto: "chill"),
    7: .same(proto: "rebond"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: TW_Polymesh_Proto_Staking.Bond?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .bond(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .bond(v)
        }
      }()
      case 2: try {
        var v: TW_Polymesh_Proto_Staking.BondExtra?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .bondExtra(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .bondExtra(v)
        }
      }()
      case 3: try {
        var v: TW_Polymesh_Proto_Staking.Unbond?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .unbond(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .unbond(v)
        }
      }()
      case 4: try {
        var v: TW_Polymesh_Proto_Staking.WithdrawUnbonded?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .withdrawUnbonded(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .withdrawUnbonded(v)
        }
      }()
      case 5: try {
        var v: TW_Polymesh_Proto_Staking.Nominate?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .nominate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .nominate(v)
        }
      }()
      case 6: try {
        var v: TW_Polymesh_Proto_Staking.Chill?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .chill(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .chill(v)
        }
      }()
      case 7: try {
        var v: TW_Polymesh_Proto_Staking.Rebond?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .rebond(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .rebond(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.messageOneof {
    case .bond?: try {
      guard case .bond(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .bondExtra?: try {
      guard case .bondExtra(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .unbond?: try {
      guard case .unbond(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .withdrawUnbonded?: try {
      guard case .withdrawUnbonded(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .nominate?: try {
      guard case .nominate(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .chill?: try {
      guard case .chill(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .rebond?: try {
      guard case .rebond(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Staking, rhs: TW_Polymesh_Proto_Staking) -> Bool {
    if lhs.messageOneof != rhs.messageOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Staking.Bond: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Staking.protoMessageName + ".Bond"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "controller"),
    2: .same(proto: "value"),
    3: .standard(proto: "reward_destination"),
    4: .standard(proto: "call_indices"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.controller) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.rewardDestination) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._callIndices) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.controller.isEmpty {
      try visitor.visitSingularStringField(value: self.controller, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    if self.rewardDestination != .staked {
      try visitor.visitSingularEnumField(value: self.rewardDestination, fieldNumber: 3)
    }
    try { if let v = self._callIndices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Staking.Bond, rhs: TW_Polymesh_Proto_Staking.Bond) -> Bool {
    if lhs.controller != rhs.controller {return false}
    if lhs.value != rhs.value {return false}
    if lhs.rewardDestination != rhs.rewardDestination {return false}
    if lhs._callIndices != rhs._callIndices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Staking.BondExtra: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Staking.protoMessageName + ".BondExtra"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "call_indices"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._callIndices) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    try { if let v = self._callIndices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Staking.BondExtra, rhs: TW_Polymesh_Proto_Staking.BondExtra) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs._callIndices != rhs._callIndices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Staking.Unbond: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Staking.protoMessageName + ".Unbond"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "call_indices"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._callIndices) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    try { if let v = self._callIndices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Staking.Unbond, rhs: TW_Polymesh_Proto_Staking.Unbond) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs._callIndices != rhs._callIndices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Staking.Rebond: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Staking.protoMessageName + ".Rebond"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "call_indices"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._callIndices) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    try { if let v = self._callIndices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Staking.Rebond, rhs: TW_Polymesh_Proto_Staking.Rebond) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs._callIndices != rhs._callIndices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Staking.WithdrawUnbonded: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Staking.protoMessageName + ".WithdrawUnbonded"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .standard(proto: "slashing_spans"),
    2: .standard(proto: "call_indices"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.slashingSpans) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._callIndices) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.slashingSpans != 0 {
      try visitor.visitSingularInt32Field(value: self.slashingSpans, fieldNumber: 1)
    }
    try { if let v = self._callIndices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Staking.WithdrawUnbonded, rhs: TW_Polymesh_Proto_Staking.WithdrawUnbonded) -> Bool {
    if lhs.slashingSpans != rhs.slashingSpans {return false}
    if lhs._callIndices != rhs._callIndices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Staking.Nominate: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Staking.protoMessageName + ".Nominate"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "nominators"),
    2: .standard(proto: "call_indices"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.nominators) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._callIndices) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.nominators.isEmpty {
      try visitor.visitRepeatedStringField(value: self.nominators, fieldNumber: 1)
    }
    try { if let v = self._callIndices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Staking.Nominate, rhs: TW_Polymesh_Proto_Staking.Nominate) -> Bool {
    if lhs.nominators != rhs.nominators {return false}
    if lhs._callIndices != rhs._callIndices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Staking.Chill: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Staking.protoMessageName + ".Chill"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .standard(proto: "call_indices"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._callIndices) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._callIndices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Staking.Chill, rhs: TW_Polymesh_Proto_Staking.Chill) -> Bool {
    if lhs._callIndices != rhs._callIndices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_IdentityId: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IdentityId"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_IdentityId, rhs: TW_Polymesh_Proto_IdentityId) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_AssetId: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetId"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_AssetId, rhs: TW_Polymesh_Proto_AssetId) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_PortfolioId: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PortfolioId"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
    2: .same(proto: "default"),
    3: .same(proto: "user"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._identity) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.`default`) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.user) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._identity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.`default` != false {
      try visitor.visitSingularBoolField(value: self.`default`, fieldNumber: 2)
    }
    if self.user != 0 {
      try visitor.visitSingularUInt64Field(value: self.user, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_PortfolioId, rhs: TW_Polymesh_Proto_PortfolioId) -> Bool {
    if lhs._identity != rhs._identity {return false}
    if lhs.`default` != rhs.`default` {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_SecondaryKeyPermissions: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SecondaryKeyPermissions"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
    2: .same(proto: "extrinsic"),
    3: .same(proto: "portfolio"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._asset) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._extrinsic) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._portfolio) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._asset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._extrinsic {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._portfolio {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_SecondaryKeyPermissions, rhs: TW_Polymesh_Proto_SecondaryKeyPermissions) -> Bool {
    if lhs._asset != rhs._asset {return false}
    if lhs._extrinsic != rhs._extrinsic {return false}
    if lhs._portfolio != rhs._portfolio {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_SecondaryKeyPermissions.RestrictionKind: WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    0: .same(proto: "Whole"),
    1: .same(proto: "These"),
    2: .same(proto: "Except"),
  ]
}

extension TW_Polymesh_Proto_SecondaryKeyPermissions.AssetPermissions: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_SecondaryKeyPermissions.protoMessageName + ".AssetPermissions"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "assets"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.assets) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.kind != .whole {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 1)
    }
    if !self.assets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assets, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_SecondaryKeyPermissions.AssetPermissions, rhs: TW_Polymesh_Proto_SecondaryKeyPermissions.AssetPermissions) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.assets != rhs.assets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_SecondaryKeyPermissions.PortfolioPermissions: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_SecondaryKeyPermissions.protoMessageName + ".PortfolioPermissions"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "portfolios"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.portfolios) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.kind != .whole {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 1)
    }
    if !self.portfolios.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.portfolios, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_SecondaryKeyPermissions.PortfolioPermissions, rhs: TW_Polymesh_Proto_SecondaryKeyPermissions.PortfolioPermissions) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.portfolios != rhs.portfolios {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_SecondaryKeyPermissions.PalletPermissions: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_SecondaryKeyPermissions.protoMessageName + ".PalletPermissions"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .standard(proto: "pallet_name"),
    2: .same(proto: "kind"),
    3: .standard(proto: "extrinsic_names"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.palletName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.extrinsicNames) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.palletName.isEmpty {
      try visitor.visitSingularStringField(value: self.palletName, fieldNumber: 1)
    }
    if self.kind != .whole {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 2)
    }
    if !self.extrinsicNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.extrinsicNames, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_SecondaryKeyPermissions.PalletPermissions, rhs: TW_Polymesh_Proto_SecondaryKeyPermissions.PalletPermissions) -> Bool {
    if lhs.palletName != rhs.palletName {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.extrinsicNames != rhs.extrinsicNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_SecondaryKeyPermissions.ExtrinsicPermissions: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_SecondaryKeyPermissions.protoMessageName + ".ExtrinsicPermissions"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "pallets"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.pallets) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.kind != .whole {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 1)
    }
    if !self.pallets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pallets, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_SecondaryKeyPermissions.ExtrinsicPermissions, rhs: TW_Polymesh_Proto_SecondaryKeyPermissions.ExtrinsicPermissions) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.pallets != rhs.pallets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Identity: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Identity"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .standard(proto: "join_identity_as_key"),
    2: .standard(proto: "add_authorization"),
    3: .standard(proto: "leave_identity_as_key"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: TW_Polymesh_Proto_Identity.JoinIdentityAsKey?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .joinIdentityAsKey(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .joinIdentityAsKey(v)
        }
      }()
      case 2: try {
        var v: TW_Polymesh_Proto_Identity.AddAuthorization?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .addAuthorization(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .addAuthorization(v)
        }
      }()
      case 3: try {
        var v: TW_Polymesh_Proto_Identity.LeaveIdentityAsKey?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .leaveIdentityAsKey(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .leaveIdentityAsKey(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.messageOneof {
    case .joinIdentityAsKey?: try {
      guard case .joinIdentityAsKey(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .addAuthorization?: try {
      guard case .addAuthorization(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .leaveIdentityAsKey?: try {
      guard case .leaveIdentityAsKey(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Identity, rhs: TW_Polymesh_Proto_Identity) -> Bool {
    if lhs.messageOneof != rhs.messageOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Identity.JoinIdentityAsKey: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Identity.protoMessageName + ".JoinIdentityAsKey"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .standard(proto: "call_indices"),
    2: .standard(proto: "auth_id"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._callIndices) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.authID) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._callIndices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.authID != 0 {
      try visitor.visitSingularUInt64Field(value: self.authID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Identity.JoinIdentityAsKey, rhs: TW_Polymesh_Proto_Identity.JoinIdentityAsKey) -> Bool {
    if lhs._callIndices != rhs._callIndices {return false}
    if lhs.authID != rhs.authID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Identity.LeaveIdentityAsKey: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Identity.protoMessageName + ".LeaveIdentityAsKey"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .standard(proto: "call_indices"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._callIndices) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._callIndices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Identity.LeaveIdentityAsKey, rhs: TW_Polymesh_Proto_Identity.LeaveIdentityAsKey) -> Bool {
    if lhs._callIndices != rhs._callIndices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Identity.AddAuthorization: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Identity.protoMessageName + ".AddAuthorization"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .standard(proto: "call_indices"),
    2: .same(proto: "target"),
    3: .same(proto: "authorization"),
    4: .same(proto: "expiry"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._callIndices) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.target) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._authorization) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.expiry) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._callIndices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.target.isEmpty {
      try visitor.visitSingularStringField(value: self.target, fieldNumber: 2)
    }
    try { if let v = self._authorization {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.expiry != 0 {
      try visitor.visitSingularUInt64Field(value: self.expiry, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Identity.AddAuthorization, rhs: TW_Polymesh_Proto_Identity.AddAuthorization) -> Bool {
    if lhs._callIndices != rhs._callIndices {return false}
    if lhs.target != rhs.target {return false}
    if lhs._authorization != rhs._authorization {return false}
    if lhs.expiry != rhs.expiry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Identity.AddAuthorization.Authorization: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Identity.AddAuthorization.protoMessageName + ".Authorization"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    6: .standard(proto: "join_identity"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 6: try {
        var v: TW_Polymesh_Proto_SecondaryKeyPermissions?
        var hadOneofValue = false
        if let current = self.authOneof {
          hadOneofValue = true
          if case .joinIdentity(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.authOneof = .joinIdentity(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .joinIdentity(let v)? = self.authOneof {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Identity.AddAuthorization.Authorization, rhs: TW_Polymesh_Proto_Identity.AddAuthorization.Authorization) -> Bool {
    if lhs.authOneof != rhs.authOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Utility: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Utility"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "batch"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: TW_Polymesh_Proto_Utility.Batch?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .batch(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .batch(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .batch(let v)? = self.messageOneof {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Utility, rhs: TW_Polymesh_Proto_Utility) -> Bool {
    if lhs.messageOneof != rhs.messageOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_Utility.BatchKind: WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    0: .same(proto: "StopOnError"),
    1: .same(proto: "Atomic"),
    2: .same(proto: "Optimistic"),
  ]
}

extension TW_Polymesh_Proto_Utility.Batch: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Polymesh_Proto_Utility.protoMessageName + ".Batch"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "calls"),
    3: .standard(proto: "call_indices"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.calls) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._callIndices) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.kind != .stopOnError {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 1)
    }
    if !self.calls.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.calls, fieldNumber: 2)
    }
    try { if let v = self._callIndices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_Utility.Batch, rhs: TW_Polymesh_Proto_Utility.Batch) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.calls != rhs.calls {return false}
    if lhs._callIndices != rhs._callIndices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_RuntimeCall: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RuntimeCall"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .standard(proto: "balance_call"),
    2: .standard(proto: "staking_call"),
    3: .standard(proto: "identity_call"),
    4: .standard(proto: "utility_call"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: TW_Polymesh_Proto_Balance?
        var hadOneofValue = false
        if let current = self.palletOneof {
          hadOneofValue = true
          if case .balanceCall(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.palletOneof = .balanceCall(v)
        }
      }()
      case 2: try {
        var v: TW_Polymesh_Proto_Staking?
        var hadOneofValue = false
        if let current = self.palletOneof {
          hadOneofValue = true
          if case .stakingCall(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.palletOneof = .stakingCall(v)
        }
      }()
      case 3: try {
        var v: TW_Polymesh_Proto_Identity?
        var hadOneofValue = false
        if let current = self.palletOneof {
          hadOneofValue = true
          if case .identityCall(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.palletOneof = .identityCall(v)
        }
      }()
      case 4: try {
        var v: TW_Polymesh_Proto_Utility?
        var hadOneofValue = false
        if let current = self.palletOneof {
          hadOneofValue = true
          if case .utilityCall(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.palletOneof = .utilityCall(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.palletOneof {
    case .balanceCall?: try {
      guard case .balanceCall(let v)? = self.palletOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .stakingCall?: try {
      guard case .stakingCall(let v)? = self.palletOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .identityCall?: try {
      guard case .identityCall(let v)? = self.palletOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .utilityCall?: try {
      guard case .utilityCall(let v)? = self.palletOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_RuntimeCall, rhs: TW_Polymesh_Proto_RuntimeCall) -> Bool {
    if lhs.palletOneof != rhs.palletOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_SigningInput: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .standard(proto: "block_hash"),
    2: .standard(proto: "genesis_hash"),
    3: .same(proto: "nonce"),
    4: .standard(proto: "spec_version"),
    5: .standard(proto: "transaction_version"),
    6: .same(proto: "tip"),
    7: .same(proto: "era"),
    8: .standard(proto: "private_key"),
    9: .same(proto: "network"),
    10: .standard(proto: "runtime_call"),
  ]

  fileprivate class _StorageClass {
    var _blockHash: Data = Data()
    var _genesisHash: Data = Data()
    var _nonce: UInt64 = 0
    var _specVersion: UInt32 = 0
    var _transactionVersion: UInt32 = 0
    var _tip: Data = Data()
    var _era: TW_Polkadot_Proto_Era? = nil
    var _privateKey: Data = Data()
    var _network: UInt32 = 0
    var _runtimeCall: TW_Polymesh_Proto_RuntimeCall? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _blockHash = source._blockHash
      _genesisHash = source._genesisHash
      _nonce = source._nonce
      _specVersion = source._specVersion
      _transactionVersion = source._transactionVersion
      _tip = source._tip
      _era = source._era
      _privateKey = source._privateKey
      _network = source._network
      _runtimeCall = source._runtimeCall
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBytesField(value: &_storage._blockHash) }()
        case 2: try { try decoder.decodeSingularBytesField(value: &_storage._genesisHash) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._nonce) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._specVersion) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._transactionVersion) }()
        case 6: try { try decoder.decodeSingularBytesField(value: &_storage._tip) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._era) }()
        case 8: try { try decoder.decodeSingularBytesField(value: &_storage._privateKey) }()
        case 9: try { try decoder.decodeSingularUInt32Field(value: &_storage._network) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._runtimeCall) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._blockHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._blockHash, fieldNumber: 1)
      }
      if !_storage._genesisHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._genesisHash, fieldNumber: 2)
      }
      if _storage._nonce != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._nonce, fieldNumber: 3)
      }
      if _storage._specVersion != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._specVersion, fieldNumber: 4)
      }
      if _storage._transactionVersion != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._transactionVersion, fieldNumber: 5)
      }
      if !_storage._tip.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._tip, fieldNumber: 6)
      }
      try { if let v = _storage._era {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if !_storage._privateKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._privateKey, fieldNumber: 8)
      }
      if _storage._network != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._network, fieldNumber: 9)
      }
      try { if let v = _storage._runtimeCall {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_SigningInput, rhs: TW_Polymesh_Proto_SigningInput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._blockHash != rhs_storage._blockHash {return false}
        if _storage._genesisHash != rhs_storage._genesisHash {return false}
        if _storage._nonce != rhs_storage._nonce {return false}
        if _storage._specVersion != rhs_storage._specVersion {return false}
        if _storage._transactionVersion != rhs_storage._transactionVersion {return false}
        if _storage._tip != rhs_storage._tip {return false}
        if _storage._era != rhs_storage._era {return false}
        if _storage._privateKey != rhs_storage._privateKey {return false}
        if _storage._network != rhs_storage._network {return false}
        if _storage._runtimeCall != rhs_storage._runtimeCall {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polymesh_Proto_SigningOutput: WalletCoreSwiftProtobuf.Message, WalletCoreSwiftProtobuf._MessageImplementationBase, WalletCoreSwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: WalletCoreSwiftProtobuf._NameMap = [
    1: .same(proto: "encoded"),
    2: .same(proto: "error"),
    3: .standard(proto: "error_message"),
  ]

  public mutating func decodeMessage<D: WalletCoreSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.encoded) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.error) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: WalletCoreSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 1)
    }
    if self.error != .ok {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 2)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polymesh_Proto_SigningOutput, rhs: TW_Polymesh_Proto_SigningOutput) -> Bool {
    if lhs.encoded != rhs.encoded {return false}
    if lhs.error != rhs.error {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
